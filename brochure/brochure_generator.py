


import logging

from openai import OpenAI
from brochure.link_selector import get_useful_links_with_openai
from brochure.web_scraper import Website
from config import MODEL, OPENAI_API_KEY


def get_all_details(url):
    """
     Merge and return all details from all links generated by link selector agent
    """
    details = "Landing page:\n"
    details += Website(url).get_content()

    # call the agent we made for getting useful links
    brochure_links = get_useful_links_with_openai(url)

    for link in brochure_links["links"]:
        details += f"""\n\n{link["type"]}\n"""
        details += Website(link["url"]).get_content()
    logging.info("Merge the details from all useful links") 
    return details


# System prompt for brochure creating agent
system_prompt = "You are an assistant that analyzes the contents of several relevant pages from a company website \
and creates a concise, engaging brochure about the company for prospective customers, investors and recruits. Respond in markdown.\
Include details of company culture, customers and careers/jobs if you have the information. Keep the tone professional yet inviting."


# Generate user prompt to create brochure
def get_brochure_user_prompt(company_name, url):
    user_prompt = f" You are looking at the company called: {company_name}\n"
    user_prompt += f"Here are the contents of its landing page and other relevent pages. Use this information to build a consice, engaging brochure of the company in markdown.\n"
    user_prompt += get_all_details(url)
    user_prompt = user_prompt[:10000]

    logging.info("User prompt generated for brochure generator agent")
    return user_prompt


# Create gpt agent for creating the brochure
def stream_brochure(company_name, url):
    logging.info("Creating GPT-4o-mini agent to generate brochure")

    openai = OpenAI(api_key=OPENAI_API_KEY)
    stream = openai.chat.completions.create(
        model = MODEL,
        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": get_brochure_user_prompt(company_name, url)}
        ],
        stream = True
    )
    
    logging.info("Generating brochure in chunk by chunk")
    for chunk in stream:
        content = chunk.choices[0].delta.content
        yield content
        
        
if __name__ == "__main__":
    # Object - brochure generator
    brochure = stream_brochure("Rokomari", "https://www.rokomari.com/")

    # iteration on the generator to see the content
    for chunk in brochure:
        print(chunk, end="")